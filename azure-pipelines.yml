trigger:
- main

pool:
  vmImage: ubuntu-latest

# Steps to set up the pipeline
steps:
# Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '22.x'
  displayName: 'Install Node.js'

# Install the latest PHP 8.x version using apt-get
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      sudo apt-get update
      sudo apt-get install -y php php-cli php-fpm php-mbstring php-xml php-zip php-curl
  displayName: 'Install the latest PHP 8.x'

# Install Composer dependencies for the PHP API
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      cd api/app
      composer install --ignore-platform-reqs
      # Rename config.example.php to config.php
      if [ -f config.example.php ]; then
        mv config.example.php config.php
      fi
      # Update database connection in config.php
      sed -i "/\$DatabaseConnection = new DatabaseConnection/s/(\".*\", \".*\", \".*\", \".*\")/(\"$DB_HOST\", \"$DB_USER\", \"$DB_PASSWORD\", \"$DB_NAME\")/" config.php
  displayName: 'Set up PHP API and update config'
  env:
    DB_HOST: $(DB_HOST)
    DB_USER: $(DB_USER)
    DB_PASSWORD: $(DB_PASSWORD)
    DB_NAME: $(DB_NAME)

# Install dependencies and build the web application
- script: |
    cd web
    npm install
    export BUILD_OUTPUT_PATH=$(Build.ArtifactStagingDirectory)/dist
    npm run build
  displayName: 'npm install and build web'


- script: |
    echo "Contents of $(Build.ArtifactStagingDirectory):"
    ls -R $(Build.ArtifactStagingDirectory)
    echo "Contents of $(System.DefaultWorkingDirectory):"
    ls -R $(System.DefaultWorkingDirectory)
  displayName: 'List directory contents'

# Publish build artifacts for the web application
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'web_dist'
    publishLocation: 'Container'
  displayName: 'Publish web build artifacts'
  
- script: |
    echo "Contents of $(Build.ArtifactStagingDirectory):"
    ls -R $(Build.ArtifactStagingDirectory)
    echo "Contents of $(System.DefaultWorkingDirectory):"
    ls -R $(System.DefaultWorkingDirectory)
  displayName: 'List directory contents'

# Clean the root directory before deployment (excluding API storage folder)
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      export SSHPASS=$SFTP_PASSWORD
      sshpass -e ssh -o StrictHostKeyChecking=no -p $SFTP_PORT $SFTP_USERNAME@$SFTP_HOST "
        ROOT_PATH=$(echo $ROOT_PATH | sed 's|^~|\$HOME|')
        eval ROOT_PATH=$ROOT_PATH
        echo \"ROOT_PATH is: \$ROOT_PATH\"
        
        # Check if api/storage exists
        if [ -d \"\$ROOT_PATH/api/storage\" ]; then
          echo \"api/storage directory exists\"
          
          # Remove everything except api/storage
          find \"\$ROOT_PATH\" -mindepth 1 ! -path \"\$ROOT_PATH/api\" ! -path \"\$ROOT_PATH/api/storage\" ! -path \"\$ROOT_PATH/api/storage/*\" -delete
          
          # If api directory is empty except for storage, remove it
          if [ \$(find \"\$ROOT_PATH/api\" -mindepth 1 ! -path \"\$ROOT_PATH/api/storage\" | wc -l) -eq 0 ]; then
            mv \"\$ROOT_PATH/api/storage\" \"\$ROOT_PATH/storage\"
            rmdir \"\$ROOT_PATH/api\"
          fi
        else
          echo \"api/storage directory does not exist\"
          # Remove everything
          rm -rf \"\$ROOT_PATH\"/*
        fi
        
        echo \"Cleanup completed. Remaining contents:\"
        ls -la \"\$ROOT_PATH\"
        if [ -d \"\$ROOT_PATH/api\" ]; then
          echo \"Contents of api directory:\"
          ls -la \"\$ROOT_PATH/api\"
        fi
        if [ -d \"\$ROOT_PATH/storage\" ]; then
          echo \"Contents of storage directory:\"
          ls -la \"\$ROOT_PATH/storage\"
        fi
      "
  displayName: 'Clean root directory (preserving API storage if exists)'
  env:
    SFTP_PASSWORD: $(SFTP_PASSWORD)
    SFTP_PORT: $(SFTP_PORT)
    SFTP_USERNAME: $(SFTP_USERNAME)
    SFTP_HOST: $(SFTP_HOST)
    ROOT_PATH: $(ROOT_PATH)

# Deploy files to the server using scp
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Ensure the target directories exist
      sshpass -e ssh -o StrictHostKeyChecking=no -p $SFTP_PORT $SFTP_USERNAME@$SFTP_HOST "mkdir -p $ROOT_PATH $ROOT_PATH/api"
      
      # Upload web application files
      sshpass -e scp -o StrictHostKeyChecking=no -P $SFTP_PORT -r $(Build.ArtifactStagingDirectory)/dist/* $SFTP_USERNAME@$SFTP_HOST:$ROOT_PATH/
      
      # Upload API files
      sshpass -e scp -o StrictHostKeyChecking=no -P $SFTP_PORT -r $(System.DefaultWorkingDirectory)/api/* $SFTP_USERNAME@$SFTP_HOST:$ROOT_PATH/api/
      
      # Verify the upload
      echo "Verifying uploaded files:"
      sshpass -e ssh -o StrictHostKeyChecking=no -p $SFTP_PORT $SFTP_USERNAME@$SFTP_HOST "ls -R $ROOT_PATH"
  displayName: 'Deploy files to server using scp'
  env:
    SSHPASS: $(SFTP_PASSWORD)
    SFTP_PORT: $(SFTP_PORT)
    SFTP_USERNAME: $(SFTP_USERNAME)
    SFTP_HOST: $(SFTP_HOST)
    ROOT_PATH: $(ROOT_PATH)




